
//////////////////// ALL ASSIGNMENTS INCLUDE THIS SECTION /////////////////////
//
// Title: Program7_SequenceGenerator
// Files: Sequence.java, ArithmeticSequenceGenerator.java, 
// GeometricSequenceGenerator. java, DigitProductSequenceGenerator.java
// SequenceGeneratorTests.java
// Course: CS 300, Semester 1, and Freshman
//
// Author: Varun Sudhakaran
// Email: vsudhakaran@wisc.edu
// Lecturer's Name: Professor Gary Dahl
//
/////////////////////////////// 80 COLUMNS WIDE ///////////////////////////////

import java.util.Iterator;

// ADD import statements here as needed

/**
 * GeometricSequenceGenerator implements Iterator<Integer>. This 
 * sequence works through an initial number and a common ratio that is
 * used through the sequence
 * 
 *@author varunsudhakaran
 */
public class GeometricSequenceGenerator implements Iterator<Integer> {
  private final int SIZE; // The number of elements in this sequence
  private final int INIT; // The first term in this sequence
  private final int RATIO; // The common ratio for this sequence
  private int next; // The next term in the sequence
  private int generatedCount; // The number of terms 
  //generated so far in this sequence
  // It refers also to the order of the next number to 
  //be generated by next() method

  // constructor
  /**
   * Constructor builds the fields into the variables
   * passed in as parameters
   * 
   * @param int init
   * @param int ratio
   * @param int size
   * 
   * @return: none
   * 
   */
  public GeometricSequenceGenerator(int init, int ratio, int size) {
    // TODO implement this constructor
    if (init <= 0 || ratio <= 0) { 
      // checks if init is less than equal to zero 
      //or ratio is less than or equal to zerp
      throw new IllegalArgumentException
      ("WARNING: The starting element and the common ratio "
          + "for a geometric progression should be STRICTLY POSITIVE."); 
      // throws error
    }
    if (size <= 0) { // checks if size is less than or equal to zero
      throw new IllegalArgumentException(
          "WARNING: CANNOT create a sequence" + " with size <= zero.");
      // throws error
    }
    this.INIT = init; // sets field to init
    this.RATIO = ratio; // sets field to ratio
    this.SIZE = size; // sets field to size
    this.next = init; // sets field to init
    this.generatedCount = 0; // sets field to zero/
  }

  // TODO implement hasNext(), and next() methods here
  @Override
  /**
   * This method checks to see if there
   * is a next variable in the sequence
   * 
   * @param: none
   * 
   * @return: boolean that represents if there is a next 
   * 
   */
  // TODO Your code comes here
// TODO time complexity: O(1) constant
  public boolean hasNext() {

    return generatedCount < SIZE; // returns the result of this statement
  }

  @Override

  /**
   * This method gets the next element in the sequence
   * 
   * @param: none
   * 
   * @return: Integer that represents the next sequence element
   * 
   */
  // TODO Your code comes herere 
//TODO time complexity: O(1) constant
  public Integer next() {
    if (!hasNext()) // check if the current element 
      //has a next element in this sequence
      return null; // returns null
    int current = next; // set the current element to next
    generatedCount++; // increment the number of 
    //generated elements so far
    next *= RATIO; // set the next element 
    //(multiplies the common ratio to the current number)
    return current; // return the current number as the generated one
  }


  // You can add local variable to your hasNext() or next() method 
  //to implement their correct
  // behavior if needed
  // You can add public getters and setters methods as needed 
  //to implement your test methods here
  // You CANNOT define mutators for any final field
  
  /**
   * main method that represents testing of methods
   * 
   * @param args
   * 
   * @return: none
   * 
   */
  public static void main(String[] args) {
    // TODO Auto-generated method stub
  }

}
